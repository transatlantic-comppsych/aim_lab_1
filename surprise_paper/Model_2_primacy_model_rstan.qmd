---
title: "Primacy Model - Model 15"
format: html
editor: visual
---

## 

## Primacy Model (Keren et al., 2021) - Calculated expectation

In this model, anxiety/mood on trial $t$ is calculated by adding the intercept $\beta_0$ (the value of anxiety/mood when the weighted sum of expectations and weighted sum of PEs are set to 0), a weighted sum of expectations and a weighted sum of PEs on trial $t$.

In this case, the expectation $E_t$ on each trial is calculated by the average of all previous outcomes ( $A_i$ ). This gives rise to a primacy bias because as more trials occur, the relative influence of each outcome diminishes due to the growing pool of outcomes influencing the expectation.

$$
A_t = \beta_0 + \beta_1 \cdot \sum_{j=1}^{t} \gamma^{t - j} \cdot E_j + \beta_2 \cdot\sum_{j=1}^{t} \gamma^{t - j} \cdot PE_j
$$

$$
M_t = \beta_0 + \beta_1 \cdot \sum_{j=1}^{t} \gamma^{t - j} \cdot E_j + \beta_2 \cdot\sum_{j=1}^{t} \gamma^{t - j} \cdot PE_j
$$

$$
E_t = \frac{1}{t-1} \sum_{i=1}^{t -1} A_i
$$

```{r}
########################################## For Anxiety ########################################
library(rstan)
library(dplyr)
library(ggplot2)


data <- read.csv("/Users/elenabagdades/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Desktop/GitHub/aim_lab_1/Surprise_task_data_analysis/surprise_task_merged_data.csv")
  

# Add necessary columns to the dataframe
data$E_t <- NA

# Loop over each participant
for (id in unique(data$Random_ID)) {
  # Extract the subset of data for the current participant
  subset_data <- data %>% filter(Random_ID == id)
  
  # Initialize values for each participant
  subset_data$E_t <- numeric(nrow(subset_data))
  # Loop over each trial for the current participant
  for (t in 1:nrow(subset_data)) {
    if (t == 1) {
      # Initialize first trial values
      E_t <- 0
    } else {
      # Calculate E_t and Implicit_PE
      E_t <- mean(subset_data$Response_fdbk[1:(t - 1)])
    }
  
    # Update subset data for the current trial
    subset_data$E_t[t] <- E_t
  }
  
  # Merge subset data back into the main data
  data[data$Random_ID == id, c("E_t")] <-
    subset_data[, c("E_t")]
}

data[, c("Response_fdbk", "Response_pred", "Response_H", "Response_Ax", "Response_SubjPE", "E_t")] <- scale(data[, c("Response_fdbk", "Response_pred", "Response_H", "Response_Ax", "Response_SubjPE", "E_t")])

N <- length(unique(data$Random_ID))  # Number of participants
T <- 48  # Trials per participant

stan_data <- list(
  N = N,
  T = T,
  Tsubj = rep(48, N),
  Response_mean_outcome = matrix(data$E_t, nrow = N, ncol = T, byrow = TRUE),
  Response_Ax = matrix(data$Response_Ax, nrow = N, ncol = T, byrow = TRUE),
  Response_SubjPE = matrix(data$Response_SubjPE, nrow = N, ncol = T, byrow = TRUE)
)


# Stan Model
primacy_anx <- "
data {
  int<lower=1> N; // Number of Participants
  int<lower=1> T; // Trials per subject
  int<lower=1, upper=T> Tsubj[N]; 
  array[N, T] real Response_mean_outcome;  // Reported expectation
  array[N, T] real Response_Ax;
  array[N, T] real Response_SubjPE;
}
 transformed data {
 }
 parameters {
  real intercept;
  real w1_mu;
  real w2_mu;
  real gam_mu;
  real sig_mu;
  
  real<lower=0> sigma_w0;
  vector<lower=0>[4] sigma;
  vector[N] w0_pr;
  vector[N] w1_pr;
  vector[N] w2_pr;
  vector[N] gam_pr;
  vector[N] sig_pr;
 }
 transformed parameters {
  vector[N] w0;
  vector[N] w1;
  vector[N] w2;
  vector<lower=0, upper=1>[N] gam;
  vector<lower=0>[N] sig;
  
  w0 = intercept + sigma_w0 * w0_pr;
  w1 = w1_mu + sigma[1] * w1_pr;
  w2 = w2_mu + sigma[2] * w2_pr;

  for (i in 1:N) {
    gam[i] = Phi_approx(gam_mu + sigma[3] * gam_pr[i]);
  }
  sig = exp(sig_mu + sigma[4] * sig_pr);
}
 model {
   // group-level priors
 intercept  ~ normal(0, 1);
  w1_mu  ~ normal(0, 0.5);
  w2_mu  ~ normal(0, 0.5);
  gam_mu ~ normal(0, 0.5);
  sig_mu ~ normal(0, 0.5);
  
  sigma_w0 ~ normal(0, 1);
  sigma ~ normal(0, 0.1);

  // Individual parameters 
  w0_pr  ~ normal(0, 1.0);
  w1_pr  ~ normal(0, 1.0);
  w2_pr  ~ normal(0, 1.0);
  gam_pr ~ normal(0, 1.0);
  sig_pr ~ normal(0, 1.0);


  for (i in 1:N) {
    real ev_sum = 0;
    real rpe_sum = 0;

    for (t in 1:Tsubj[i]) {
      Response_Ax[i, t] ~ normal(w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);

      ev_sum += Response_mean_outcome[i, t];
      rpe_sum += Response_SubjPE[i, t];

      ev_sum *= gam[i];
      rpe_sum *= gam[i];
     }
   }
 }
 generated quantities {
  real mu_w0;
  real mu_w1;
  real mu_w2;
  real<lower=0, upper=1> mu_gam;
  real<lower=0> mu_sig;
  
  real log_lik[N];

  // For posterior predictive check
  real y_pred[N, T];
  
  // Set all posterior predictions to 0 (avoids NULL values)
  for (i in 1:N) {
    for (t in 1:T) {
      y_pred[i, t] = -1;
    }
  }

  mu_w0    = intercept;
  mu_w1    = w1_mu;
  mu_w2    = w2_mu;
  mu_gam   = Phi_approx(gam_mu);
  mu_sig   = exp(sig_mu);

  
  
  { // local section, this saves time and space
  for (i in 1:N) {
    real ev_sum = 0;
    real rpe_sum = 0;
    log_lik[i] = 0;

    for (t in 1:Tsubj[i]) {
      log_lik[i] += normal_lpdf(Response_Ax[i, t] | w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);
      y_pred[i, t] = normal_rng(w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);

      ev_sum += Response_mean_outcome[i, t];
      rpe_sum += Response_SubjPE[i, t];

      ev_sum *= gam[i];
      rpe_sum *= gam[i];
      }
    }
  }
}

"
```

```{r}
# Compile and Fit the Model
primacy_anx_fit <- stan(model_code = primacy_anx, data = stan_data, iter = 4000, warmup = 2000, chains = 4, seed = 123, cores = 4, control = list(adapt_delta = 0.95,
  max_treedepth = 10))

# Print results
print(primacy_anx_fit)


# Save the model output as an .rds file
saveRDS(primacy_anx_fit, file = "primacy_anx_fit.rds")
```

```{r}

# Plot results
traceplot(primacy_anx_fit)

# Extract posterior samples
posterior_samples <- rstan::extract(primacy_anx_fit)

library(ggplot2)
library(dplyr)
library(tidyr)


# 2. Calculate the estimated Response_Ax for each participant
# Generate the estimated Response_Ax from posterior predictive distribution
y_pred <- posterior_samples$y_pred


# Extract log-likelihood per participant (N-length vector)
log_lik_vector <- rstan::extract(primacy_anx_fit, pars = "log_lik")$log_lik  # Dimensions: [S, N] (S = posterior samples)

# Compute LOO-CV
library(loo)
loo_result <- loo(log_lik_vector)
print(loo_result)
dim(log_lik_vector)
library(loo)

# Compute WAIC
waic_result <- waic(log_lik_vector)
print(waic_result)

# Extract the posterior samples
posterior_samples <- rstan::extract(primacy_anx_fit)

# Predicted values (posterior predictive distribution)
y_pred <- posterior_samples$y_pred
# Load required package
library(matrixStats)

# Compute mean predicted values (posterior mean)
y_pred_mean <- apply(y_pred, c(2,3), mean)  # Mean across posterior samples

# Compute MSE
mse <- mean((y_pred_mean - stan_data$Response_Ax)^2)

# Compute MAE
mae <- mean(abs(y_pred_mean -  stan_data$Response_Ax))

print(paste("MSE:", mse))
print(paste("MAE:", mae))


y_pred_mean <- apply(posterior_samples$y_pred, c(2, 3), mean) 
y_pred_df <- as.data.frame(y_pred_mean)
colnames(y_pred_df) <- paste0("Trial_", 1:T)
y_pred_df$Random_ID <- unique(data$Random_ID)


# Convert Response_Ax to matrix and then to a data frame
Response_Ax_matrix <- matrix(data$Response_Ax, nrow = N, ncol = T, byrow = TRUE)
Response_Ax_df <- as.data.frame(Response_Ax_matrix)
colnames(Response_Ax_df) <- paste0("Trial_", 1:T)
Response_Ax_df$Random_ID <- unique(data$Random_ID)

# Reshape data into long format
y_pred_long <- pivot_longer(y_pred_df, cols = starts_with("Trial_"), names_to = "Trial", values_to = "Predicted_Response")
Response_Ax_long <- pivot_longer(Response_Ax_df, cols = starts_with("Trial_"), names_to = "Trial", values_to = "Actual_Response")

# Merge actual and predicted data
plot_data <- left_join(Response_Ax_long, y_pred_long, by = c("Random_ID", "Trial"))

# Convert Trial to numeric
plot_data$Trial <- as.numeric(gsub("Trial_", "", plot_data$Trial))



# Plot individual real data and fitted curve for each participant using ggplot2
ggplot(plot_data, aes(x = Trial)) +
  geom_line(aes(y = Actual_Response), color = "blue", size = 1) + 
  geom_line(aes(y = Predicted_Response), color = "red", size = 1) +
  facet_wrap(~ Random_ID, scales = "free_y") +
  labs(title = "Real Data and Fitted Curve per Participant",
       x = "Trial Number",
       y = "Anxiety") +
  ylim(0,100)
  theme_minimal()

```

```{r}
########################################## For Mood ########################################
library(rstan)
library(dplyr)
library(ggplot2)

#Load Data
data <- read.csv("/Users/elenabagdades/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Desktop/GitHub/aim_lab_1/Surprise_task_data_analysis/surprise_task_merged_data.csv")
  

# Add necessary columns to the dataframe
data$E_t <- NA

# Loop over each participant
for (id in unique(data$Random_ID)) {
  # Extract the subset of data for the current participant
  subset_data <- data %>% filter(Random_ID == id)
  
  # Initialize values for each participant
  subset_data$E_t <- numeric(nrow(subset_data))
  # Loop over each trial for the current participant
  for (t in 1:nrow(subset_data)) {
    if (t == 1) {
      # Initialize first trial values
      E_t <- 0
    } else {
      # Calculate E_t and Implicit_PE
      E_t <- mean(subset_data$Response_fdbk[1:(t - 1)])
    }
  
    # Update subset data for the current trial
    subset_data$E_t[t] <- E_t
  }
  
  # Merge subset data back into the main data
  data[data$Random_ID == id, c("E_t")] <-
    subset_data[, c("E_t")]
}

data[, c("Response_fdbk", "Response_pred", "Response_H", "Response_Ax", "Response_SubjPE", "E_t")] <- scale(data[, c("Response_fdbk", "Response_pred", "Response_H", "Response_Ax", "Response_SubjPE", "E_t")])


N <- length(unique(data$Random_ID))  # Number of participants
T <- 48  # Trials per participant

stan_data <- list(
  N = N,
  T = T,
  Tsubj = rep(48, N),
  Response_mean_outcome = matrix(data$E_t, nrow = N, ncol = T, byrow = TRUE),
  Response_H = matrix(data$Response_H, nrow = N, ncol = T, byrow = TRUE),
  Response_SubjPE = matrix(data$Response_SubjPE, nrow = N, ncol = T, byrow = TRUE)
)


# Stan Model
primacy_mood <- "
data {
  int<lower=1> N; // Number of Participants
  int<lower=1> T; // Trials per subject
  int<lower=1, upper=T> Tsubj[N]; 
  array[N, T] real Response_mean_outcome;  // Reported expectation
  array[N, T] real Response_H;
  array[N, T] real Response_SubjPE;
}
 transformed data {
 }
 parameters {
  real intercept;
  real w1_mu;
  real w2_mu;
  real gam_mu;
  real sig_mu;
  
  real<lower=0> sigma_w0;
  vector<lower=0>[4] sigma;
  vector[N] w0_pr;
  vector[N] w1_pr;
  vector[N] w2_pr;
  vector[N] gam_pr;
  vector[N] sig_pr;
 }
 transformed parameters {
  vector[N] w0;
  vector[N] w1;
  vector[N] w2;
  vector<lower=0, upper=1>[N] gam;
  vector<lower=0>[N] sig;
  
  w0 = intercept + sigma_w0 * w0_pr;
  w1 = w1_mu + sigma[1] * w1_pr;
  w2 = w2_mu + sigma[2] * w2_pr;

  for (i in 1:N) {
    gam[i] = Phi_approx(gam_mu + sigma[3] * gam_pr[i]);
  }
  sig = exp(sig_mu + sigma[4] * sig_pr);
}
 model {
   // group-level priors
  intercept  ~ normal(0, 1);
  w1_mu  ~ normal(0, 0.5);
  w2_mu  ~ normal(0, 0.5);
  gam_mu ~ normal(0, 0.5);
  sig_mu ~ normal(0, 0.5);
  
  sigma_w0 ~ normal(0, 1);
  sigma ~ normal(0, 0.1);

  // Individual parameters 
  w0_pr  ~ normal(0, 1.0);
  w1_pr  ~ normal(0, 1.0);
  w2_pr  ~ normal(0, 1.0);
  gam_pr ~ normal(0, 1.0);
  sig_pr ~ normal(0, 1.0);


  for (i in 1:N) {
    real ev_sum = 0;
    real rpe_sum = 0;

    for (t in 1:Tsubj[i]) {
      Response_H[i, t] ~ normal(w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);

      ev_sum += Response_mean_outcome[i, t];
      rpe_sum += Response_SubjPE[i, t];

      ev_sum *= gam[i];
      rpe_sum *= gam[i];
     }
   }
 }
 generated quantities {
  real mu_w0;
  real mu_w1;
  real mu_w2;
  real<lower=0, upper=1> mu_gam;
  real<lower=0> mu_sig;
  
  real log_lik[N];

  // For posterior predictive check
  real y_pred[N, T];
  
  // Set all posterior predictions to 0 (avoids NULL values)
  for (i in 1:N) {
    for (t in 1:T) {
      y_pred[i, t] = -1;
    }
  }

  mu_w0    = intercept;
  mu_w1    = w1_mu;
  mu_w2    = w2_mu;
  mu_gam   = Phi_approx(gam_mu);
  mu_sig   = exp(sig_mu);

  
  
  { // local section, this saves time and space
  for (i in 1:N) {
    real ev_sum = 0;
    real rpe_sum = 0;
    log_lik[i] = 0;

    for (t in 1:Tsubj[i]) {
      log_lik[i] += normal_lpdf(Response_H[i, t] | w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);
      y_pred[i, t] = normal_rng(w0[i] + w1[i] * ev_sum + w2[i] * rpe_sum, sig[i]);

      ev_sum += Response_mean_outcome[i, t];
      rpe_sum += Response_SubjPE[i, t];

      ev_sum *= gam[i];
      rpe_sum *= gam[i];
      }
    }
  }
}

"
```

```{r}
# Compile and Fit the Model
primacy_mood_fit <- stan(model_code = primacy_mood, data = stan_data, iter = 4000, warmup = 2000, chains = 4, seed = 123, cores = 4, control = list(adapt_delta = 0.95,
  max_treedepth = 10))

# Print results
print(primacy_mood_fit)

# Save the model output as an .rds file
saveRDS(primacy_mood_fit, file = "primacy_mood_fit.rds")
```

```{r}

# Plot results
traceplot(primacy_mood_fit)

# Extract posterior samples
posterior_samples <- rstan::extract(primacy_mood_fit)

library(ggplot2)
library(dplyr)
library(tidyr)


# 2. Calculate the estimated Response_Ax for each participant
# Generate the estimated Response_Ax from posterior predictive distribution
y_pred <- posterior_samples$y_pred


# Extract log-likelihood per participant (N-length vector)
log_lik_vector <- rstan::extract(primacy_mood_fit, pars = "log_lik")$log_lik  # Dimensions: [S, N] (S = posterior samples)

# Compute LOO-CV
library(loo)
loo_result <- loo(log_lik_vector)
print(loo_result)
dim(log_lik_vector)
library(loo)

# Compute WAIC
waic_result <- waic(log_lik_vector)
print(waic_result)



# Extract the posterior samples
posterior_samples <- rstan::extract(primacy_mood_fit)

# Predicted values (posterior predictive distribution)
y_pred <- posterior_samples$y_pred
# Load required package
library(matrixStats)

# Compute mean predicted values (posterior mean)
y_pred_mean <- apply(y_pred, c(2,3), mean)  # Mean across posterior samples

# Compute MSE
mse <- mean((y_pred_mean - stan_data$Response_H)^2)

# Compute MAE
mae <- mean(abs(y_pred_mean -  stan_data$Response_H))

print(paste("MSE:", mse))
print(paste("MAE:", mae))


y_pred_mean <- apply(posterior_samples$y_pred, c(2, 3), mean) 
y_pred_df <- as.data.frame(y_pred_mean)
colnames(y_pred_df) <- paste0("Trial_", 1:T)
y_pred_df$Random_ID <- unique(data$Random_ID)


# Convert Response_Ax to matrix and then to a data frame
Response_H_matrix <- matrix(data$Response_H, nrow = N, ncol = T, byrow = TRUE)
Response_H_df <- as.data.frame(Response_H_matrix)
colnames(Response_H_df) <- paste0("Trial_", 1:T)
Response_H_df$Random_ID <- unique(data$Random_ID)

# Reshape data into long format
y_pred_long <- pivot_longer(y_pred_df, cols = starts_with("Trial_"), names_to = "Trial", values_to = "Predicted_Response")
Response_H_long <- pivot_longer(Response_H_df, cols = starts_with("Trial_"), names_to = "Trial", values_to = "Actual_Response")

# Merge actual and predicted data
plot_data <- left_join(Response_H_long, y_pred_long, by = c("Random_ID", "Trial"))

# Convert Trial to numeric
plot_data$Trial <- as.numeric(gsub("Trial_", "", plot_data$Trial))



# Plot individual real data and fitted curve for each participant using ggplot2
ggplot(plot_data, aes(x = Trial)) +
  geom_line(aes(y = Actual_Response), color = "blue", size = 1) + 
  geom_line(aes(y = Predicted_Response), color = "red", size = 1) +
  facet_wrap(~ Random_ID, scales = "free_y") +
  labs(title = "Real Data and Fitted Curve per Participant",
       x = "Trial Number",
       y = "Mood") +
  ylim(0,100)
  theme_minimal()
```
