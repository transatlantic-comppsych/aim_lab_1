---
title: "Model_7_asymmetric_PE_simple_outcome_rstan"
format: html
editor: visual
---

## Model 8 (DEP interactions)

In this model, anxiety/mood on trial $t$ is calculated by adding the intercept $\beta_0$ (the value of anxiety/mood when $W_{1t}$ and $W_{2t}$ are set to 0), a weighted cumulative PEa weighted cumulative expectation on trial $t$ and the score for trait depressive symptoms.

The term $\gamma^{(t - j)}$ decreases as $j$ becomes smaller relative to $t$. This means that PE and expectations closer to the current trial $t$ have larger weights, while PE and expectations further in the past have smaller weights. The exponential function ensures that PE and expectations further back in time are **"discounted" exponentially**. This is a type of **recency** **model**.

$$
A_{it} = \beta_{0i} +\beta_{1i}\cdot  \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{pos,j} + \beta_{2i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{neg,j}  + \beta_{3i}\cdot O_t\ + \beta_{4i}\cdot DEP + \beta_{5i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{pos,j}\cdot DEP + \beta_{6i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{neg,j}\cdot DEP + \beta_{6i}\cdot O_t\cdot DEP 
$$

$$
M_{it} = \beta_{0i} +\beta_{1i}\cdot  \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{pos,j} + \beta_{2i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{neg,j}  + \beta_{3i}\cdot O_t\ + \beta_{4i}\cdot DEP + \beta_{5i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{pos,j}\cdot DEP + \beta_{6i}\cdot \sum_{j=1}^{t} \gamma_i^{t - j} \cdot PE_{neg,j}\cdot DEP + \beta_{6i}\cdot O_t\cdot DEP
$$

```{r}
########################################## For Anxiety ########################################
library(rstan)
library(dplyr)
library(ggplot2)
library(here)
library(tidyr)
library(loo)
library(matrixStats)

data <- read.csv(here("Data","Extracted_data","Merged Data - all groups", "surprise_task_merged_data.csv"))

# Ensure data is sorted by Random_ID and trial within each participant
data <- data[order(data$Random_ID), ]

# Extract unique participant IDs in order
participant_ids <- unique(data$Random_ID)
data$Response_SubjPE_scaled <- scale(data$Response_SubjPE)[, 1]
data$Response_fdbk <- scale(data$Response_fdbk)[, 1]
data$Response_Ax <- scale(data$Response_Ax)[, 1]

# Recalculate positive and negative PEs using original (unscaled) sign
data$Response_PosPE <- ifelse(data$Response_SubjPE > 0, data$Response_SubjPE_scaled, 0)
data$Response_NegPE <- ifelse(data$Response_SubjPE < 0, data$Response_SubjPE_scaled, 0)

# Recalculate depression vector in the correct order
Depression_vector <- sapply(participant_ids, function(id) {
  unique(data$Depression_score_scaled[data$Random_ID == id])[1]
})



N <- length(unique(data$Random_ID))  # Number of participants
T <- 48  # Trials per participant
# Construct matrices in the same participant order
Response_fdbk_matrix <- matrix(data$Response_fdbk, nrow = N, ncol = T, byrow = TRUE)
Response_Ax_matrix <- matrix(data$Response_Ax, nrow = N, ncol = T, byrow = TRUE)
Response_PosPE_matrix <- matrix(data$Response_PosPE, nrow = N, ncol = T, byrow = TRUE)
Response_NegPE_matrix <- matrix(data$Response_NegPE, nrow = N, ncol = T, byrow = TRUE)



stan_data <- list(
  N = N,
  T = T,
  Tsubj = rep(48, N),
  Response_fdbk = Response_fdbk_matrix,
  Response_Ax = Response_Ax_matrix,
  Response_PosPE = Response_PosPE_matrix,
  Response_NegPE = Response_NegPE_matrix,
  Depression_score = Depression_vector

)





# Stan Model
model_8_DEP_anx <- "data {
  int<lower=1> N;
  int<lower=1> T;
  int<lower=1, upper=T> Tsubj[N]; 
  array[N, T] real Response_fdbk;
  array[N, T] real Response_Ax;
  array[N, T] real Response_PosPE;
  array[N, T] real Response_NegPE;
  vector[N] Depression_score;
}
parameters {
  real intercept;
  real w1_mu;
  real w_pos_mu;
  real w_neg_mu;
  real gam_mu;
  real sig_mu;


  // Regression weights for Social_Anxiety
  real beta_w0;
  real beta_w1;
  real beta_w_pos;
  real beta_w_neg;
  real beta_gam;
  real beta_sig;
  real beta_Dep;  // Direct effect of Social_Anxiety
  
  real<lower=0> sigma_w0;
  vector<lower=0>[5] sigma;

  vector[N] w0_pr;
  vector[N] w1_pr;
  vector[N] w_pos_pr;
  vector[N] w_neg_pr;
  vector[N] gam_pr;
  vector[N] sig_pr;
}
transformed parameters {
  vector[N] w0;
  vector[N] w1;
  vector[N] w_pos;
  vector[N] w_neg;
  vector<lower=0, upper=1>[N] gam;
  vector<lower=0>[N] sig;
  
  for (i in 1:N) {
    w0[i]  = intercept + beta_w0 * Depression_score[i] + sigma_w0 * w0_pr[i];
    w1[i]  = w1_mu + beta_w1 * Depression_score[i] + sigma[1] * w1_pr[i];
    w_pos[i]  = w_pos_mu + beta_w_pos * Depression_score[i] + sigma[2] * w_pos_pr[i];
    w_neg[i]  = w_neg_mu + beta_w_neg * Depression_score[i] + sigma[3] * w_neg_pr[i];

    gam[i] = Phi_approx(gam_mu + beta_gam * Depression_score[i] + sigma[4] * gam_pr[i]);
    sig[i] = exp(sig_mu + beta_sig * Depression_score[i] + sigma[5] * sig_pr[i]);
  }
}

model {
  intercept ~ normal(0, 1);
  w1_mu ~ normal(0, 0.5);
  w_pos_mu ~ normal(0, 0.5);
  w_neg_mu ~ normal(0, 0.5);
  gam_mu ~ normal(0, 0.5);
  sig_mu ~ normal(0, 0.5);

  beta_w0  ~ normal(0, 0.5);
  beta_w1  ~ normal(0, 0.5);
  beta_w_pos  ~ normal(0, 0.5);
  beta_w_neg  ~ normal(0, 0.5);
  beta_gam ~ normal(0, 0.5);
  beta_sig ~ normal(0, 0.5);
  beta_Dep  ~ normal(0, 0.5);
  sigma_w0 ~ normal(0, 1);
  sigma ~ normal(0, 0.1);

  w0_pr ~ normal(0, 1);
  w1_pr ~ normal(0, 1);
  w_pos_pr ~ normal(0, 1);
  w_neg_pr ~ normal(0, 1);
  gam_pr ~ normal(0, 1);
  sig_pr ~ normal(0, 1);

  for (i in 1:N) {
    real pospe_sum = 0;
    real negpe_sum = 0;

    for (t in 1:Tsubj[i]) {
      Response_Ax[i, t] ~ normal(
        w0[i] + w1[i] * Response_fdbk[i, t] + w_pos[i] * pospe_sum + w_neg[i] * negpe_sum + beta_Dep * Depression_score[i],sig[i]);

      pospe_sum += Response_PosPE[i, t];
      negpe_sum += Response_NegPE[i, t];

      pospe_sum *= gam[i];
      negpe_sum *= gam[i];
    }
  }
}
generated quantities {
  real mu_w0;
  real mu_w1;
  real mu_w_pos;
  real mu_w_neg;
  real<lower=0, upper=1> mu_gam;
  real<lower=0> mu_sig;

  real log_lik[N];
  real y_pred[N, T];

  mu_w0 = intercept;
  mu_w1 = w1_mu;
  mu_w_pos = w_pos_mu;
  mu_w_neg = w_neg_mu;
  mu_gam = Phi_approx(gam_mu);
  mu_sig = exp(sig_mu);

  for (i in 1:N) {
    real pospe_sum = 0;
    real negpe_sum = 0;
    log_lik[i] = 0;

    for (t in 1:Tsubj[i]) {
      real mu = w0[i] + w1[i] * Response_fdbk[i, t] + w_pos[i] * pospe_sum + w_neg[i] * negpe_sum + beta_Dep * Depression_score[i];
      log_lik[i] += normal_lpdf(Response_Ax[i, t] | mu, sig[i]);
      y_pred[i, t] = normal_rng(mu, sig[i]);

      pospe_sum += Response_PosPE[i, t];
      negpe_sum += Response_NegPE[i, t];

      pospe_sum *= gam[i];
      negpe_sum *= gam[i];
    }
  }
}
"

```

```{r}

# Compile and Fit the Model
model_8_DEP_anx_fit <- stan(model_code = model_8_DEP_anx, data = stan_data, iter = 4000, warmup = 2000, chains = 4, seed = 123, cores = 4, control = list(adapt_delta = 0.95,
  max_treedepth = 10))

options(max.print = 9999)  # Set a higher limit

# Print results
print(model_8_DEP_anx_fit)

saveRDS(model_8_DEP_anx_fit, "model_8_DEP_anx_fit.rds")
```

```{r}
########################################## For Mood ########################################
library(rstan)
library(dplyr)
library(ggplot2)
library(here)
library(tidyr)
library(loo)
library(matrixStats)

data <- read.csv(here("Data","Extracted_data","Merged Data - all groups", "surprise_task_merged_data.csv"))


# Ensure data is sorted by Random_ID and trial within each participant
data <- data[order(data$Random_ID), ]

# Extract unique participant IDs in order
participant_ids <- unique(data$Random_ID)
data$Response_SubjPE_scaled <- scale(data$Response_SubjPE)[, 1]
data$Response_fdbk <- scale(data$Response_fdbk)[, 1]
data$Response_H <- scale(data$Response_H)[, 1]

# Recalculate positive and negative PEs using original (unscaled) sign
data$Response_PosPE <- ifelse(data$Response_SubjPE > 0, data$Response_SubjPE_scaled, 0)
data$Response_NegPE <- ifelse(data$Response_SubjPE < 0, data$Response_SubjPE_scaled, 0)

# Recalculate depression vector in the correct order
Depression_vector <- sapply(participant_ids, function(id) {
  unique(data$Depression_score_scaled[data$Random_ID == id])[1]
})



N <- length(unique(data$Random_ID))  # Number of participants
T <- 48  # Trials per participant

# Construct matrices in the same participant order
Response_fdbk_matrix <- matrix(data$Response_fdbk, nrow = N, ncol = T, byrow = TRUE)
Response_H_matrix <- matrix(data$Response_H, nrow = N, ncol = T, byrow = TRUE)
Response_PosPE_matrix <- matrix(data$Response_PosPE, nrow = N, ncol = T, byrow = TRUE)
Response_NegPE_matrix <- matrix(data$Response_NegPE, nrow = N, ncol = T, byrow = TRUE)


stan_data <- list(
  N = N,
  T = T,
  Tsubj = rep(48, N),
  Response_fdbk = Response_fdbk_matrix,
  Response_H = Response_H_matrix,
  Response_PosPE = Response_PosPE_matrix,
  Response_NegPE = Response_NegPE_matrix,
  Depression_score = Depression_vector

)


# Stan Model
model_8_DEP_mood <- "data {
  int<lower=1> N;
  int<lower=1> T;
  int<lower=1, upper=T> Tsubj[N]; 
  array[N, T] real Response_fdbk;
  array[N, T] real Response_H;
  array[N, T] real Response_PosPE;
  array[N, T] real Response_NegPE;
  vector[N] Depression_score;
}
parameters {
  real intercept;
  real w1_mu;
  real w_pos_mu;
  real w_neg_mu;
  real gam_mu;
  real sig_mu;


  // Regression weights for Social_Anxiety
  real beta_w0;
  real beta_w1;
  real beta_w_pos;
  real beta_w_neg;
  real beta_gam;
  real beta_sig;
  real beta_Dep;  // Direct effect of Social_Anxiety
  
  real<lower=0> sigma_w0;
  vector<lower=0>[5] sigma;

  vector[N] w0_pr;
  vector[N] w1_pr;
  vector[N] w_pos_pr;
  vector[N] w_neg_pr;
  vector[N] gam_pr;
  vector[N] sig_pr;
}
transformed parameters {
  vector[N] w0;
  vector[N] w1;
  vector[N] w_pos;
  vector[N] w_neg;
  vector<lower=0, upper=1>[N] gam;
  vector<lower=0>[N] sig;
  
  for (i in 1:N) {
    w0[i]  = intercept + beta_w0 * Depression_score[i] + sigma_w0 * w0_pr[i];
    w1[i]  = w1_mu + beta_w1 * Depression_score[i] + sigma[1] * w1_pr[i];
    w_pos[i]  = w_pos_mu + beta_w_pos * Depression_score[i] + sigma[2] * w_pos_pr[i];
    w_neg[i]  = w_neg_mu + beta_w_neg * Depression_score[i] + sigma[3] * w_neg_pr[i];

    gam[i] = Phi_approx(gam_mu + beta_gam * Depression_score[i] + sigma[4] * gam_pr[i]);
    sig[i] = exp(sig_mu + beta_sig * Depression_score[i] + sigma[5] * sig_pr[i]);
  }
}

model {
  intercept ~ normal(0, 1);
  w1_mu ~ normal(0, 0.5);
  w_pos_mu ~ normal(0, 0.5);
  w_neg_mu ~ normal(0, 0.5);
  gam_mu ~ normal(0, 0.5);
  sig_mu ~ normal(0, 0.5);

  beta_w0  ~ normal(0, 0.5);
  beta_w1  ~ normal(0, 0.5);
  beta_w_pos  ~ normal(0, 0.5);
  beta_w_neg  ~ normal(0, 0.5);
  beta_gam ~ normal(0, 0.5);
  beta_sig ~ normal(0, 0.5);
  beta_Dep  ~ normal(0, 0.5);
  sigma_w0 ~ normal(0, 1);
  sigma ~ normal(0, 0.1);

  w0_pr ~ normal(0, 1);
  w1_pr ~ normal(0, 1);
  w_pos_pr ~ normal(0, 1);
  w_neg_pr ~ normal(0, 1);
  gam_pr ~ normal(0, 1);
  sig_pr ~ normal(0, 1);

  for (i in 1:N) {
    real pospe_sum = 0;
    real negpe_sum = 0;

    for (t in 1:Tsubj[i]) {
      Response_H[i, t] ~ normal(
        w0[i] + w1[i] * Response_fdbk[i, t] + w_pos[i] * pospe_sum + w_neg[i] * negpe_sum + beta_Dep * Depression_score[i],sig[i]);

      pospe_sum += Response_PosPE[i, t];
      negpe_sum += Response_NegPE[i, t];

      pospe_sum *= gam[i];
      negpe_sum *= gam[i];
    }
  }
}
generated quantities {
  real mu_w0;
  real mu_w1;
  real mu_w_pos;
  real mu_w_neg;
  real<lower=0, upper=1> mu_gam;
  real<lower=0> mu_sig;

  real log_lik[N];
  real y_pred[N, T];

  mu_w0 = intercept;
  mu_w1 = w1_mu;
  mu_w_pos = w_pos_mu;
  mu_w_neg = w_neg_mu;
  mu_gam = Phi_approx(gam_mu);
  mu_sig = exp(sig_mu);

  for (i in 1:N) {
    real pospe_sum = 0;
    real negpe_sum = 0;
    log_lik[i] = 0;

    for (t in 1:Tsubj[i]) {
      real mu = w0[i] + w1[i] * Response_fdbk[i, t] + w_pos[i] * pospe_sum + w_neg[i] * negpe_sum + beta_Dep * Depression_score[i];
      log_lik[i] += normal_lpdf(Response_H[i, t] | mu, sig[i]);
      y_pred[i, t] = normal_rng(mu, sig[i]);

      pospe_sum += Response_PosPE[i, t];
      negpe_sum += Response_NegPE[i, t];

      pospe_sum *= gam[i];
      negpe_sum *= gam[i];
    }
  }
}
"

```

```{r}

# Compile and Fit the Model
model_8_DEP_mood_fit <- stan(model_code = model_8_DEP_mood, data = stan_data, iter = 4000, warmup = 2000, chains = 4, seed = 123, cores = 4, control = list(adapt_delta = 0.95,
  max_treedepth = 10))

options(max.print = 9999)  # Set a higher limit

# Print results
print(model_8_DEP_mood_fit)

saveRDS(model_8_DEP_mood_fit, "model_8_DEP_mood_fit.rds")
```
